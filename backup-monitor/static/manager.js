'use strict';

var _Serverboards$1=Serverboards;
var rpc$1=_Serverboards$1.rpc;
var plugin_id$1='serverboards.backup.monitor';
function hex(a){var b=[],c=new DataView(a);for(var d=0;d<c.byteLength;d+=4){// Using getUint32 reduces the number of iterations needed (we process 4 bytes each time)
var f=c.getUint32(d),g=f.toString(16),h='00000000',j=(h+g).slice(-h.length);// toString(16) will give the hex representation of the number without padding
// We use concatenation and slice for padding
b.push(j)}// Join all the hex strings into one
return b.join('')}function old_backup(a){// must match today date or yesterdays
var b=new Date().toISOString().slice(0,10),c=new Date;c.setDate(c.getDate()-1);var d=c.toISOString().slice(0,10);return a==b||a==d}function get_state(_ref){var a=_ref.file_expression,b=_ref.service;console.log(a+'-'+b);var c=new TextEncoder('utf-8').encode(a+'-'+b),d=crypto.subtle.digest('SHA-256',c).then(function(f){var g='test-'+hex(f);return console.log(g),rpc$1.call('plugin.data_get',[plugin_id$1,g])}).then(function(f){if(console.log(f),!f.filename)return{color:'red',state:'Cant get data from any backup. Maybe not performed yet?'};console.log(f);var g=old_backup(f.datetime);return{filename:f.filename,datetime:f.datetime.slice(0,16).replace('T',' '),color:g?'red':'green',state:g?'Old backup. Check ASAP':'Ok',size:f.size}}).catch(function(f){return console.error(f),{color:'red',state:f.toString()}});return d}

var _Serverboards=Serverboards;
var React=_Serverboards.React;
var rpc=_Serverboards.rpc;
var plugin_id='serverboards.backup.monitor';
var EditFileRow=React.createClass({displayName:'EditFileRow',getInitialState:function getInitialState(){var a='custom';return'serverboards.core.actions/set_label'==this.props.rule.actions.exists.action&&(a='labels'),'serverboards.core.actions/send_notification'==this.props.rule.actions['not-exists'].action&&(a='notification'),{color:this.props.rule.is_active?'yellow':'grey',state:'Checking status',action:a}},componentDidMount:function componentDidMount(){var _this=this;$(this.refs.services).dropdown(),$(this.refs.actions).dropdown(),get_state(this.props.rule).then(function(a){_this.setState({color:a.color,state:a.state})})},get_actions:function get_actions(a){var _this2=this,b=this.props.rule.actions;// Only will change if modified
if(a!=this.state.action)switch(a){case'labels':b={exists:{action:'serverboards.core.actions/set_label',params:{labels:'-BACKUP_FAIL'}},'not-exists':{action:'serverboards.core.actions/set_label',params:{labels:'BACKUP_FAIL'}}};break;case'notification':{var _ret=function(){var c=$(_this2.refs.el),d=c.find('[name=service]').val(),f=c.find('[name=file_expression]').val();return b={'not-exists':{action:'serverboards.core.actions/send_notification',params:{title:'Backup was not properly performed',email:'@user',body:'Backup at '+_this2.props.services.find(function(g){return g.uuid==d}).name+', file '+f+' failed.\n\nPlease check ASAP.'}}},'break'}();if('break'===_ret)break}}return b},saveChanges:function saveChanges(){var _this3=this,a=$(this.refs.el),b={service:a.find('[name=service]').val(),file_expression:a.find('[name=file_expression]').val(),when:a.find('[name=when]').val(),action:a.find('[name=action]').val()};{var g=this.props.rule;if(b.service==g.service&&b.file_expression==g.file_expression&&b.when==g.when&&b.action==this.state.action)return;// Nothing changed
}var c=this.props,d=this.get_actions(b.action),f={uuid:c.rule.uuid,is_active:!0,name:c.rule.name||'Remote file check',description:c.rule.description,service:b.service,serverboard:c.serverboard.shortname,trigger:{trigger:plugin_id+'/file_exists',params:{file_expression:b.file_expression,when:b.when}},actions:d};this.setState({color:'grey'}),rpc.call('rules.update',f).then(function(){return _this3.setState({color:'yellow'}),get_state({file_expression:b.file_expression,service:b.service})}).then(function(g){console.log('Got state: %o',g),_this3.setState({color:g.color,state:g.state})}).catch(function(g){Serverboards.Flash.error('Error updating rule')})},render:function render(){var a=this.props,b=this.state;return React.createElement('tr',{className:'ui form',ref:'el'},React.createElement('td',null,React.createElement('i',{className:'ui circular '+b.color+' small label','data-tooltip':b.state})),React.createElement('td',null,React.createElement('select',{ref:'services',name:'service',className:'ui dropdown',defaultValue:a.rule.service,onChange:this.saveChanges},this.props.services.map(function(c){return React.createElement('option',{value:c.uuid},c.name)}))),React.createElement('td',{className:'ui field',style:{width:'36em'}},React.createElement('input',{type:'text',name:'file_expression',className:'ui field',defaultValue:a.rule.file_expression,onBlur:this.saveChanges})),React.createElement('td',{className:'ui field',style:{width:'8em'}},React.createElement('input',{type:'text',name:'when',className:'ui field',defaultValue:a.rule.when,onBlur:this.saveChanges})),React.createElement('td',null,React.createElement('select',{ref:'actions',name:'action',defaultValue:b.action,onChange:this.saveChanges},React.createElement('option',{value:'custom'},'Custom'),React.createElement('option',{value:'labels'},'Set service labels'),React.createElement('option',{value:'notification'},'Send notification'))))}});
var Manager=React.createClass({displayName:'Manager',getInitialState:function getInitialState(){var a=this.props.serverboard.services.filter(function(b){return'serverboards.core.ssh/ssh'==b.type});return{services:a,rules:[]}},componentDidMount:function componentDidMount(){var _this4=this;rpc.call('rules.list',{serverboard:this.props.serverboard.shortname}).then(function(a){console.log('all rules',a);var b=a.filter(function(c){return plugin_id+'/file_exists'==c.trigger.trigger}).map(function(c){return{file_expression:c.trigger.params.file_expression,service:c.service,when:c.trigger.params.when,uuid:c.uuid,description:c.description,name:c.name,is_active:c.is_active,actions:c.actions}});_this4.setState({rules:b})})},render:function render(){var a=this.props,b=this.state;return console.log(a,b),React.createElement('div',{className:'ui central container'},React.createElement('h1',{className:'ui header'},'Backup Monitor Manager'),React.createElement('div',{className:'ui meta'},'Easy manage the backup watchers rules. '),React.createElement('table',{className:'ui table'},React.createElement('thead',null,React.createElement('tr',null,React.createElement('th',null),React.createElement('th',null,'Service'),React.createElement('th',null,'File path'),React.createElement('th',null,'Check time'),React.createElement('th',null,'Action'))),React.createElement('tbody',null,b.rules.map(function(c){return React.createElement(EditFileRow,{rule:c,services:b.services,serverboard:a.serverboard})}))),React.createElement('button',{className:'ui yellow button'},'Update backup rules changes'),React.createElement('a',{onClick:this.addRow,className:'ui massive button _add icon floating green'},React.createElement('i',{className:'add icon'})))}});
function main(a,b){return Serverboards.ReactDOM.render(React.createElement(Manager,{serverboard:b.serverboard}),a),function(){Serverboards.ReactDOM.unmountComponentAtNode(a)}}Serverboards.add_screen(plugin_id+'/manager',main);
//# sourceMappingURL=manager.js.map
